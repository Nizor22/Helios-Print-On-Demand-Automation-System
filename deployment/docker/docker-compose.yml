version: '3.8'

services:
  # Google Cloud Emulators
  firestore-emulator:
    image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
    command: gcloud emulators firestore start --host-port=0.0.0.0:8080
    ports:
      - "8080:8080"
    environment:
      - FIRESTORE_PROJECT_ID=helios-dev
      - FIRESTORE_EMULATOR_HOST=0.0.0.0:8080
    volumes:
      - firestore-data:/firestore-data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  pubsub-emulator:
    image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
    command: gcloud emulators pubsub start --host-port=0.0.0.0:8085
    ports:
      - "8085:8085"
    environment:
      - PUBSUB_PROJECT_ID=helios-dev
      - PUBSUB_EMULATOR_HOST=0.0.0.0:8085
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085"]
      interval: 30s
      timeout: 10s
      retries: 3

  storage-emulator:
    image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
    command: gcloud emulators storage start --host-port=0.0.0.0:4443
    ports:
      - "4443:4443"
    environment:
      - STORAGE_EMULATOR_HOST=0.0.0.0:4443
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4443"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP Server
  mcp-server:
    build:
      context: ../../mcp
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    environment:
      - GOOGLE_CLOUD_PROJECT=helios-dev
      - GOOGLE_APPLICATION_CREDENTIALS=/secrets/service-account.json
    volumes:
      - ../../mcp:/app
      - ../../config:/config
      - ../../.env:/app/.env
    depends_on:
      - firestore-emulator
      - pubsub-emulator
      - storage-emulator
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # CEO Orchestrator Service
  ceo-orchestrator:
    build:
      context: ..
      dockerfile: docker/Dockerfile.ceo
    ports:
      - "8000:8000"
    environment:
      - GOOGLE_CLOUD_PROJECT=helios-dev
      - GOOGLE_APPLICATION_CREDENTIALS=/secrets/service-account.json
      - FIRESTORE_EMULATOR_HOST=firestore-emulator:8080
      - PUBSUB_EMULATOR_HOST=pubsub-emulator:8085
      - STORAGE_EMULATOR_HOST=storage-emulator:4443
      - MCP_SERVER_URL=http://mcp-server:8080
      - ENVIRONMENT=development
      - DRY_RUN=true
    volumes:
      - ../../config:/config
      - ../../.env:/app/.env
      - ../../output:/app/output
    depends_on:
      - mcp-server
      - firestore-emulator
      - pubsub-emulator
      - storage-emulator
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Trend Discovery Service
  trend-discovery:
    build:
      context: ..
      dockerfile: docker/Dockerfile.agents
    ports:
      - "8001:8000"
    environment:
      - GOOGLE_CLOUD_PROJECT=helios-dev
      - GOOGLE_APPLICATION_CREDENTIALS=/secrets/service-account.json
      - FIRESTORE_EMULATOR_HOST=firestore-emulator:8080
      - MCP_SERVER_URL=http://mcp-server:8080
      - ENVIRONMENT=development
      - SERVICE_TYPE=trend_discovery
    volumes:
      - ../../config:/config
      - ../../.env:/app/.env
    depends_on:
      - mcp-server
      - firestore-emulator
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Content Generation Service
  content-generation:
    build:
      context: ..
      dockerfile: docker/Dockerfile.agents
    ports:
      - "8002:8000"
    environment:
      - GOOGLE_CLOUD_PROJECT=helios-dev
      - GOOGLE_APPLICATION_CREDENTIALS=/secrets/service-account.json
      - FIRESTORE_EMULATOR_HOST=firestore-emulator:8080
      - STORAGE_EMULATOR_HOST=storage-emulator:4443
      - ENVIRONMENT=development
      - SERVICE_TYPE=content_generation
    volumes:
      - ../../config:/config
      - ../../.env:/app/.env
      - ../../output:/app/output
    depends_on:
      - firestore-emulator
      - storage-emulator
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Publication Handler Service
  publication-handler:
    build:
      context: ..
      dockerfile: docker/Dockerfile.agents
    ports:
      - "8003:8000"
    environment:
      - GOOGLE_CLOUD_PROJECT=helios-dev
      - GOOGLE_APPLICATION_CREDENTIALS=/secrets/service-account.json
      - FIRESTORE_EMULATOR_HOST=firestore-emulator:8080
      - STORAGE_EMULATOR_HOST=storage-emulator:4443
      - ENVIRONMENT=development
      - SERVICE_TYPE=publication_handler
      - DRY_RUN=true
    volumes:
      - ../../config:/config
      - ../../.env:/app/.env
      - ../../output:/app/output
    depends_on:
      - firestore-emulator
      - storage-emulator
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for local development (optional)
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=helios_dev
      - POSTGRES_USER=helios
      - POSTGRES_PASSWORD=helios_dev_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U helios -d helios_dev"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy for local development
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - ceo-orchestrator
      - trend-discovery
      - content-generation
      - publication-handler
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  firestore-data:
  redis-data:
  postgres-data:

networks:
  default:
    name: helios-network
